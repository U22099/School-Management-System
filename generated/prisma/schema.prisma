generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("VERCEL_DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) // Use UUID for primary key
  name           String
  email          String    @unique
  password       String
  role           Role // Enum to distinguish user roles
  schoolId       String?
  class          String?
  parentId       String?
  oracleNo       String? // Staff-specific property
  registrationNo String? // Student-specific property
  designation    String? // Staff-specific property
  post           String? // Staff-specific property
  payrollNo      String? // Staff-specific property
  level          String? // Staff-specific property
  yearOfExit     String? // Staff-specific property
  address        String?
  phoneNo        String?
  yearOfService  String? // Staff-specific property
  teaching       Boolean? // Staff-specific property
  parentNo       String? // Student-specific property
  parentName     String? // Student-specific property
  DOA            DateTime? // Date of Admission (Student-specific)
  birthdate      DateTime? // Student-specific property
  admissionNo    String? // Student-specific property
  gender         String? // Student-specific property

  // Relations
  school     School?      @relation(fields: [schoolId], references: [id])
  parent     User?        @relation("ParentToChildren", fields: [parentId], references: [id])
  children   User[]       @relation("ParentToChildren") // Opposite relation field
  Class      Class[]
  Attendance Attendance[]
}

model School {
  id               String       @id @default(uuid()) // Use UUID for primary key
  name             String
  address          String
  primaryColor     String
  secondaryColor   String
  mutedColor       String
  accentColor      String
  logo             String // Image URL
  missionStatement String
  visionStatement  String
  principal        String
  vicePrincipal    String
  slogan           String
  subjects         String[]
  User             User[]
  Class            Class[]
  Timetable        Timetable[]
  Attendance       Attendance[]
}

model Class {
  id        String @id @default(uuid()) // Use UUID for primary key
  name      String
  schoolId  String
  teacherId String

  // Relations
  school     School       @relation(fields: [schoolId], references: [id])
  teacher    User         @relation(fields: [teacherId], references: [id])
  Attendance Attendance[]
}

model Timetable {
  id         String   @id @default(uuid()) // Use UUID for primary key
  day        String // e.g., Monday, Tuesday
  startTime  DateTime
  endTime    DateTime
  class      String
  subject    String
  period     Int
  periodSpan Int
  schoolId   String

  //Relations
  school School @relation(fields: [schoolId], references: [id])
}

model Attendance {
  id        String   @id @default(uuid()) // Use UUID for primary key
  date      DateTime
  status    String // e.g., Present, Absent
  schoolId  String
  studentId String
  classId   String

  // Relations
  school  School? @relation(fields: [schoolId], references: [id])
  student User    @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}
