generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("VERCEL_DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) // Use UUID for primary key
  email    String @unique
  password String @default("")
  role     Role
  schoolId String @unique
  resetToken String?
  resetTokenExpiry DateTime?

  // Relations
  school School @relation(fields: [schoolId], references: [id])
  RefreshTokens RefreshTokens[]
}

model RefreshTokens {
  id       String @id @default(uuid()) // Use UUID for primary key
  userId   String 
  tokenHash String @unique
  deviceInfo String @default("")
  ipAddress String @default("")
  createdAt DateTime @default(now())
  expiresOn DateTime
  lastUsed DateTime

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model Staff {
  id            String   @id @default(uuid()) // Use UUID for primary key
  name          String
  email         String
  oracleNo      String
  registrationNo String
  designation   String
  post          String
  payrollNo     String
  level         String
  yearOfService Int
  teaching      Boolean
  address       String
  phoneNo       String
  yearOfExit    Int
  schoolId      String
  admin         Boolean

  // Relations
  school School @relation(fields: [schoolId], references: [id])
}

model Parent {
  id        String   @id @default(uuid()) // Use UUID for primary key
  email     String
  name      String
  phoneNo   Int
  address   String
  schoolId  String

  // Relations
  school   School @relation(fields: [schoolId], references: [id])
  Student Student[]
}

model Student {
  id           String   @id @default(uuid()) // Use UUID for primary key
  name         String
  email        String
  parentId     String
  parentNo     Int
  parentName     String
  registrationNo String
  admissionNo  String
  birthdate    String
  gender       String
  DOA          String // Date of Admission
  class        String
  address      String
  schoolId     String

  // Relations
  school School @relation(fields: [schoolId], references: [id])
  parent Parent @relation(fields: [parentId], references: [id])
  Attendance Attendance[]
}

model School {
  id               String       @id @default(uuid()) // Use UUID for primary key
  name             String
  address          String
  primaryColor     String       @default("")
  primaryColorLight String       @default("")
  secondaryColor   String       @default("")
  secondaryColorLight String       @default("")
  accentColor1     String       @default("")
  accentColor1Light String       @default("")
  accentColor2     String       @default("")
  accentColor2Light String       @default("")
  accentColor3     String       @default("")
  accentColor3Light String       @default("")
  logo             String // Image URL
  missionStatement String       @default("")
  visionStatement  String       @default("")
  principal        String
  vicePrincipal    String
  slogan           String
  type             SchoolType
  startHour        String
  closeHour        String
  timetableHtml    String
  admins           String[]
  subjects         String[]

  // Relations
  users       User[]
  staffs      Staff[]
  parents     Parent[]
  students    Student[]
  classes     Class[]
  timetables  Timetable[]
  attendances Attendance[]
}

model Class {
  id        String @id @default(uuid()) // Use UUID for primary key
  name      String
  totalStudent Int @default(0)
  classTeacher String
  schoolId  String

  // Relations
  school     School @relation(fields: [schoolId], references: [id])
  Attendance Attendance[]
}

model Timetable {
  id         String   @id @default(uuid()) // Use UUID for primary key
  day        String // e.g., Monday, Tuesday
  startTime  String
  endTime    String
  class      String
  subject    String
  period     Int
  periodSpan Int
  schoolId   String

  // Relations
  school School @relation(fields: [schoolId], references: [id])
}

model Attendance {
  id        String   @id @default(uuid()) // Use UUID for primary key
  date      DateTime
  status    String // e.g., Present, Absent
  schoolId  String
  studentId String
  classId   String

  // Relations
  school  School  @relation(fields: [schoolId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum SchoolType {
  PRIMARY
  JUNIOR
  SENIOR
}